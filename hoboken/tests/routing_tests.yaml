---
name: just_slash
path: /
regex: \A/\Z
successes:
  - route: /
---
name: no_params
path: /foo
regex: \A/foo\Z
successes:
  - route: /foo
---
name: single_named_param
path: /:foo
regex: \A/([^/?#]+)\Z
successes:
  - route: /bar
    kwargs: {foo: bar}
  - route: /foo.bar
    kwargs: {foo: 'foo.bar'}
  - route: /foo%2Fbar
    kwargs: {foo: foo%2Fbar}
fails:
  - /foo?
  - /foo/bar
  - /
  - /foo/
---
name: unicode_path
path: /föö
regex: \A/f\%C3\%B6\%C3\%B6\Z
successes:
  - route: /f%C3%B6%C3%B6
---
name: two_params
path: /:foo/:bar
regex: \A/([^/?#]+)/([^/?#]+)\Z
successes:
  - route: /one/two
    kwargs: {foo: one, bar: two}
---
name: param_after_path
path: /greet/:name
regex: \A/greet/([^/?#]+)\Z
successes:
  - route: /greet/John
    kwargs: {name: John}
---
name: simple_splat
path: /*
regex: \A/(.*?)\Z
successes:
  - route: /
    args: ['']
  - route: /onesegment
    args: ['onesegment']
  - route: /two/segments
    args: ['two/segments']
---
name: param_after_splat
path: /*/:name
regex: \A/(.*?)/([^/?#]+)\Z
successes:
  - route: /greet/John
    args: ['greet']
    kwargs: {name: John}
---
name: param_before_splat
path: /:param/*
regex: \A/([^/?#]+)/(.*?)\Z
successes:
  - route: /one/two/three
    args: ['two/three']
    kwargs: {param: one}
---
name: params_with_email
path: /:one/:two
regex: \A/([^/?#]+)/([^/?#]+)\Z
successes:
  - route: /user@example.com/email
    kwargs: {one: 'user@example.com', two: email}
---
name: with_dollar_sign
path: /test$/
regex: \A/test(?:\$|\%24)/\Z
successes:
  - route: /test$/
fails:
  - /test/
---
name: with_plus
path: /te+st/
regex: \A/te(?:\+|\%2B)st/\Z
successes:
  - route: /te+st/
fails:
  - /test/
  - /teeest/
---
name: with_brackets
path: /test(bar)/
regex: \A/test(?:\(|\%28)bar(?:\)|\%29)/\Z
successes:
  - route: /test(bar)/
---
name: with_spaces
path: /path with spaces/
regex: \A/path(?:\%20|(?:\+|\%2B))with(?:\%20|(?:\+|\%2B))spaces/\Z
successes:
  - route: /path%20with%20spaces/
  - route: /path+with+spaces/
  - route: /path%2Bwith%2Bspaces/
---
name: with_ampersand
path: /one&two/
regex: \A/one(?:\&|\%26)two/\Z
successes:
  - route: /one&two/
---
name: with_encoded
path: /:param/*
regex: \A/([^/?#]+)/(.*?)\Z
successes:
  - route: /this%20is%20a/test%20path%20yo
    args: ['test%20path%20yo']
    kwargs: {param: 'this%20is%20a'}
---
name: with_multiple_splats
path: /*/middle/*/*
regex: \A/(.*?)/middle/(.*?)/(.*?)\Z
successes:
  - route: /one/middle/two/three/four
    args: ['one', 'two', 'three/four']
fails:
  - /one/middle/two
---
name: with_period
path: /file.ext
regex: \A/file(?:\.|\%2E)ext\Z
successes:
  - route: /file.ext
fails:
  - /file0ext
---
name: optional_params
path: /:file.?:optext?
regex: \A/([^\.\%2E/?#]+)(?:\.|\%2E)?([^\.\%2E/?#]+)?\Z
successes:
  - route: /name
    kwargs: {file: name, optext: null}
  - route: /name.
    kwargs: {file: name, optext: null}
  - route: /name.ext
    kwargs: {file: name, optext: ext}
  - route: /name%2Eext
    kwargs: {file: name, optext: ext}
fails:
  - /.justext
---
name: advanced_optional_params
path: /:user@?:host?
regex: \A/([^\@\%40/?#]+)(?:\@|\%40)?([^\@\%40/?#]+)?\Z
successes:
  - route: /andrew
    kwargs: {user: andrew, host: null}
  - route: /andrew@computer
    kwargs: {user: andrew, host: computer}
  - route: /one.two@three
    kwargs: {user: one.two, host: three}
  - route: /one@two.three
    kwargs: {user: one, host: two.three}
